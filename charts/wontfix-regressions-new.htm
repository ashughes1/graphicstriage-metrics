<div class='row trunk-section'>
  <div class='col-lg-12 text-center' id='chart'>LOADING DATA...</div>
</div>

<script>
    MG._hooks = {};
    
    var globals = {};
    
    globals.mouseover = function(d,i) {
        d3.select('svg .mg-active-datapoint')
            .text(d.version + ': ' + d.count);
        var arr = d.version.split("firefox");
        var prev_ver = "firefox" + (arr[1]-1);
        globals.url = "https://bugzilla.mozilla.org/buglist.cgi?query_format=advanced&component=Canvas%3A 2D&component=Canvas%3A WebGL&component=GFX%3A Color Management&component=Graphics&component=Graphics%3A Layers&component=Graphics%3A Text&component=Image Blocking&component=ImageLib&component=Panning and Zooming&product=Core" + "&f1=cf_status_" + d.version + "&o1=anyexact&v1=wontfix" + "&f2=cf_status_" + prev_ver + "&o2=isempty";
    }
    
    function convertDate(d) {
        var day = (d.getDate() < 10) ? '0' + d.getDate().toString() : d.getDate().toString();
        var month = ((d.getMonth()+1) < 10) ? '0' + (d.getMonth()+1).toString() : (d.getMonth()+1).toString();
        var year = d.getFullYear().toString();
        return year + '-' + month + '-' + day;
    }
    
    function format(f) {
        var pf = d3.formatPrefix(f);
        return Math.round(pf.scale(f)) + pf.symbol;
    }
    
    function callback(key, count) {
        if (i >= keys.length) {
            draw(items);
        } else {
            if (count > -1) {
                items[key] = count;
                document.getElementById('chart').innerHTML = "LOADING DATA " + (i/keys.length*100).toFixed(0) + "%...";
                callback(keys[++i], -1);
            } else {
                var arr = key.split("firefox");
                var prev_key = "firefox" + (arr[1]-1);
                var url = url_base
                    + "&f1=cf_status_" + key + "&o1=anyexact&v1=wontfix"
                    + "&f2=cf_status_" + prev_key + "&o2=isempty";
                d3.json(url, function(data) {
                    if (!data) return callback(new Error("Unable to load JSON data!"));
                    callback(keys[i], data.bugs.length);
                });
            }
        }
    }
    
    function draw(data) {
        var new_data = [];
        for (key in data) {
            var item = {};
            item['version'] = key;
            item['count'] = data[key];
            new_data.push(item);
        }
        document.getElementById('chart').innerHTML = "";
        MG.data_graphic({
            data: new_data,
            title: "New Shipped Graphics Regressions",
            description: "Graphics bugs marked as wontfix which were introduced in the specific version",
            width: 600,
            height: 300,
            left: 120,
            bottom: 90,
            target: document.getElementById('chart'),
            x_accessor: "count",
            y_accessor: "version",
            x_label: "Bugs tagged wontfix",
            max_x:100,
            chart_type: "bar",
            mouseover: globals.mouseover
        });
        var mouseouts = d3.selectAll('.mg-rollover-rect rect').on('mouseout');
        d3.selectAll('.mg-rollover-rect rect')
            .on('click', function(d) {
                window.open(globals.url, '_blank');
            });
    }
    
    var today = convertDate(new Date((new Date()).valueOf()));
    var url_base = "https://bugzilla.mozilla.org/rest/bug?query_format=advanced&component=Canvas%3A 2D&component=Canvas%3A WebGL&component=GFX%3A Color Management&component=Graphics&component=Graphics%3A Layers&component=Graphics%3A Text&component=Image Blocking&component=ImageLib&component=Panning and Zooming&product=Core&include_fields=id"
    
    var keys = [];
    var items = {};
    for (var i=42; i<=51; i++) {
        keys.push("firefox" + i);
    }
    var i = 0;
    callback(keys[i], -1);
    
    
    
</script>
