<div class='row trunk-section'>
  <div class='col-lg-4 text-left' id='chart'><p class='col-lg-4 text-center' style='padding-top:80px; padding-left:40px'>LOADING...</p></div>
</div>

<script>
    MG._hooks = {};
    var globals = {
        "mouseover": function(d,i) {
            var end_date = convertDate(d.date);
            var start_date = convertDate(new Date(d.date.valueOf()-1*24*60*60*1000));
            d3.select('#chart svg .mg-active-datapoint')
                .text(end_date + ': ' + d.unresolved_pct + '% UNRESOLVED');
            globals["url"] = "https://hg.mozilla.org/releases/mozilla-release/pushloghtml?startdate=" + start_date + "&enddate=" + end_date;
        },
        "markers": {
            "releases":[
                {'date': new Date('2015-12-14T00:00:00.000Z'),'label': '43'},
                {'date': new Date('2016-01-25T00:00:00.000Z'),'label': '44'},
                {'date': new Date('2016-03-08T00:00:00.000Z'),'label': '45'},
                {'date': new Date('2016-04-26T00:00:00.000Z'),'label': '46'}
            ],"events":[
                {'date': new Date('2015-01-01T00:00:00.000Z'),'label': 'GFX Triage'},
                {'date': new Date('2016-04-14T00:00:00.000Z'),'label': 'QA Triage'}
            ]    
        }
    };
    
    function convertDate(d) {
        var day = (d.getDate() < 10) ? '0' + d.getDate().toString() : d.getDate().toString();
        var month = ((d.getMonth()+1) < 10) ? '0' + (d.getMonth()+1).toString() : (d.getMonth()+1).toString();
        var year = d.getFullYear().toString();
        return year + '-' + month + '-' + day;
    }
    
    function initialize(days) {
        var result = [];
        for (var i=days; i>0; i--) {
            result.push({"date":convertDate(new Date((new Date()).valueOf()-i*24*60*60*1000)),"resolved":0,"unresolved":0,"unresolved_pct":0});
        }
        return result;
    }
    
    function draw(chart_data) {
        chart_data = MG.convert.date(chart_data, 'date');
        $.each(chart_data, function(i) {
            if (chart_data[i].resolved != 0 && chart_data[i].unresolved != 0) {
                chart_data[i].unresolved_pct = (chart_data[i].unresolved/(chart_data[i].resolved + chart_data[i].unresolved)*100).toFixed(2);    
            }
        });
        
        var data= [];
        for (var i=chart_data.length-365; i<chart_data.length; i++) {
            data.push(chart_data[i]);
        }
        
        document.getElementById('chart').innerHTML = "";
        MG.data_graphic({
            data: data,
            width: 200,
            height: 200,
            target: document.getElementById('chart'),
            x_accessor: "date",
            y_accessor: "unresolved_pct",
            chart_type: "line",
            max_y: 100,
            linked:true,
            mouseover: globals.mouseover,
            x_label: "% Unresolved"
        });
    }
    
    function process(data) {        
        $.each(chart_data, function(index_chart,object_chart) {
            var chart_date = new Date(object_chart.date);
            $.each(data, function(index_data, object_data) {
                var creation_date = new Date(object_data.creation_time.substring(0,10));
                var resolved_date = (object_data.cf_last_resolved) ? new Date(object_data.cf_last_resolved.substring(0,10)) : null;
                // Bug was open on or before the day
                if ((chart_date - creation_date) >= 0) {
                    // Bug was resolved on or before the day
                    if (resolved_date && (resolved_date - chart_date) <= 0) {
                        chart_data[index_chart].resolved += 1;
                    // Bug was unresolved on or before the day
                    } else {
                        chart_data[index_chart].unresolved += 1;
                    }
                }
                if (index_data >= data.length-1 && index_chart >= chart_data.length-1) {
                    console.log(chart_data);
                    draw(chart_data);
                }
            });
            
        });
    }
    
    var date_start = convertDate(new Date((new Date()).valueOf()-730*24*60*60*1000));
    var query = "https://bugzilla.mozilla.org/rest/bug?product=Core" +
        "&component=Canvas%3A 2D&component=Canvas%3A WebGL&component=GFX%3A Color Management&component=Graphics" +
        "&component=Graphics%3A Layers&component=Graphics%3A Text&component=ImageLib&component=Panning and Zooming" +
        "&keywords=regression&keywords_type=anywords&f1=days_elapsed&o1=greaterthan&v1=42" +
        "&creation_time=" + date_start + "&include_fields=id,resolution,creation_time,cf_last_resolved";
    var chart_data = initialize(730);
    d3.json(query, function(data) {
        if (!data) return new Error("Unable to load JSON data!");
        if (Object.keys(data) == "bugs") {
            process(data.bugs);
        }     
    });
</script>
